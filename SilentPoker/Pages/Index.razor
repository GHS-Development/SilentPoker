@page "/"

@using SilentPoker.Models
@using SilentPoker.Services
@using System.Text.RegularExpressions

@inject IConfiguration _config
@inject PokerDatabase _pokerDatabase
@inject ServiceNowAPI _serviceNowAPI
@inject Microsoft.AspNetCore.Http.IHttpContextAccessor HttpContextAccessor

<PageTitle>Index</PageTitle>

<div class="container-fluid">
    <div class="row">
        <div class="col-12 mb-3">
            @if (room != null)
            {
                if (room.OpenVoting)
                {
                    
                }
                else
                {
                    <div class="alert alert-danger me-2" role="alert">
                        Voting is closed for this room.  Votes displayed are the voting results, hover over the vote to reveal who voted.
                    </div>
                }
                votingMembers = 0;
                foreach (var member in members)
                {
                    if (member.Role == MemberRole.Developer || member.Role == MemberRole.ScrumMaster)
                    {
                        <span class="badge bg-primary me-1">@member.UserId</span>
                        votingMembers++;
                    }
                    else
                    {
                        <span class="badge bg-secondary me-1">@member.UserId</span>
                    }

                }
            }
        </div>
        <div class="col-8">
            
            
            <select @bind="roomSelected" class="form-control" id="Room" aria-describedby="NameHelp">
                  
                @if (rooms == null)
                {
                    <option value="">Loading...</option>
                } 
                else 
                { 
                    <option value="">Choose a room</option>
                    foreach (Room room in rooms)
                    {
                        <option value="@room.Id">@room.Name</option>    
                    }
                }
                
            </select>
        </div>
    
        <div class="col-4">
            <button type="button" class="btn btn-primary" @onclick="GetStories">Load Stories</button>
            <button type="button" class="me-0 rounded-pill" @onclick="ShowEstimator">
                <i class="bi bi-calculator-fill"></i> Estimator
            </button>
        </div>
    </div>

    <div class="col-12 mb-2 mt-1">
        @if (stories != null) {
            <span class="text-muted">This room contains @stories.Count stories </span>
            @if(members == null)
            {
                <span class="text-muted me-1">and has no members assigned.</span>
            } 
            else
            {
                <span class="text-muted me-1">and has @members.Count members.</span>
                if (members.Count != 0 && votingMembers == members.Count)
                {
                    <span class="text-muted me-1">All members can vote.</span>
                }
                else
                {
                    if (members.Count !=0)
                    {
                        <span class="text-muted me-1">Only @votingMembers member(s) can vote.</span>
                    }
                }
            }
            @if (room.Filter == "")
            {
            }
            else
            {
                <span class="text-muted">This filter is applied: <strong>@room.Filter.</strong></span>
            }
        }
    </div>

    <div class="row pt-3 flex">
        <div class="col-12">
            <table class="table table-striped">
                <thead>
                    <tr>
                        <th scope="col" class="col-1">Number</th>
                        <th scope="col" class="col-1"></th>
                        <th scope="col" class="col-7">Short Description</th>
                        <th scope="col" class="col-3">Vote</th>
                    </tr>
                </thead>
                <tbody>
                    @if (stories == null)
                    {
                        <tr>
                            <td scope="row" colspan="4">
                                <em>Choose a room to begin voting.</em>
                            </td>
                        </tr>
                    }
                    else
                    {
                        if (room != null)
                        {
                            @foreach (Story story in stories)
                            {
                                story.CaclulateVote(members);

                                <StoryDetail AllowPass="@room.AllowPass"
                                             OpenVoting="@room.OpenVoting"
                                             Story=@story
                                             UserRole=@currentRole
                                             Members=@members/>
                            }
                        }
                    }
                </tbody>
            </table>
        </div>
    </div>

</div>

<Estimator @ref="estimatorModal" />

@code {
    Room? room;
    List<Room>? rooms;
    List<Story>? stories;
    List<Member>? members;
    public int roomSelected { get; set; }
    public int votingMembers { get; set; }
    public string? user { get; set; }
    public MemberRole currentRole { get; set; }

    private Estimator estimatorModal;

    private void ShowEstimator()
    {
        estimatorModal.Show();
    }

    protected override async Task OnInitializedAsync()
    {
        user = HttpContextAccessor.HttpContext?.User.Identity?.Name;
        rooms = await _pokerDatabase.GetRooms();

        
    }

    private async Task GetStories()
    {
        List<Vote>? votes = null;

        if (roomSelected > 0)
        {
            room = await _pokerDatabase.GetRoom(roomSelected);
            members = await _pokerDatabase.GetMembers(roomSelected);

            if (room != null)
            {
                stories = await _serviceNowAPI.GetStories(room.Sprint, room.Filter);
                if (user != null)
                {
                    votes = await _pokerDatabase.GetVotesForUser(user);
                }   
            }
            
            if (stories != null)
            {
                foreach (Story story in stories)
                {
                    story.MyVote = -3;
                    if (votes != null)
                    {
                        var i = votes.FirstOrDefault(item => item.StoryId == story.Sys_id);
                        if (i != null)
                            story.MyVote = i.VoteValue;
                    }
                    story.Votes = await _pokerDatabase.GetVotesForStory(story.Sys_id);
                }
            }
            // Determine current users role
            foreach (var member in members)
            {
                if (member.UserId == user)
                {
                    currentRole = member.Role;
                }
            }

        } else 
        {
            stories = null;
        }
    }
}
